{"mappings":";;;;;;;;;;;8CAAM;;;kDAEA;;AAGN,MAAM,mCAAa;AACnB,MAAM,+BAAS,mCAAa,+BAAW,oCAAc,CAAC;AACtD,MAAM,4BAAM,wCAAc,kCAAc;AAExC,MAAM,8BAAQ,KAAK,MAAM,mBAAY,CAAC,EAAE;AACxC,MAAM,qCAAe,4BAAM,IAAI;AAC/B,QAAQ,IAAI,KAAK,UAAU;AAE3B,SAAS,kCAAY,QAAgB;IACnC,IAAI,OAAO,aAAa,YAAY,aAAa,IAC/C,OAAO;IAGT,wEAAwE;IACxE,oFAAoF;IACpF,IAAI,SAAS,SAAS,OACpB,OAAO;IAGT,IAAI,SAAS;IACb,MAAM,QAAQ,SAAS,MAAM;IAC7B,IAAI,UAAU,MAAM,OAAO,CAAC,GAAG,IAAM,IAAI,MAAM;IAE/C,IAAI,OAAO,CAAC,QAAQ,SAAS,EAAE,KAAK,IAClC,QAAQ;IAGV,UAAU,oCAAc;IAExB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAClC,UAAU,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAG5B,OAAO,OAAO,UAAU;AAC1B;AAEA,SAAS,8BAAQ,WAAmB;IAClC,OAAO,OAAO,cAAc,EAAE,IAAI,OAAO,cAAc,EAAE;AAC3D;AAEA,SAAS,oCAAc,SAAmB;IACxC,MAAM,sBAAsB,0BAAI,cAAc;IAE9C,OAAO,oBACJ,KAAK,CAAC,GAAG,EAAoB,EAAE,GAAG,EAAoB;QACrD,IAAI,MAAM,GAAG,OAAO;QACpB,IAAI,MAAM,MAAM,OAAO;QACvB,IAAI,MAAM,MAAM,OAAO;QACvB,OAAO,8BAAQ,IAAI;IACrB,GACC,IAAI,CAAC,CAAC,UAA4B,GAAK;AAC5C","sources":["src/index.ts"],"sourcesContent":["const { createContext } = require(\"tailwindcss/lib/lib/setupContextUtils.js\");\nconst resolveConfig = require(\"tailwindcss/resolveConfig.js\");\nconst { default: resolveConfigPath } = require(\"tailwindcss/lib/util/resolveConfigPath.js\");\nconst loadConfig = require(\"tailwindcss/loadConfig.js\");\n\nconst configPath = resolveConfigPath();\nconst config = configPath ? loadConfig(configPath) : {};\nconst ctx = createContext(resolveConfig(config));\n\nconst texts = JSON.parse(process.argv[2]);\nconst replacements = texts.map(sortClasses);\nconsole.log(JSON.stringify(replacements));\n\nfunction sortClasses(classStr: string): string {\n  if (typeof classStr !== \"string\" || classStr === \"\") {\n    return classStr;\n  }\n\n  // Ignore class attributes containing `{{`, to match Prettier behaviour:\n  // https://github.com/prettier/prettier/blob/main/src/language-html/embed.js#L83-L88\n  if (classStr.includes(\"{{\")) {\n    return classStr;\n  }\n\n  let result = \"\";\n  const parts = classStr.split(/(\\s+)/);\n  let classes = parts.filter((_, i) => i % 2 === 0);\n\n  if (classes[classes.length - 1] === \"\") {\n    classes.pop();\n  }\n\n  classes = sortClassList(classes);\n\n  for (let i = 0; i < classes.length; i++) {\n    result += `${classes[i]} `;\n  }\n\n  return result.trimEnd().trimStart();\n}\n\nfunction bigSign(bigIntValue: bigint): number {\n  return Number(bigIntValue > 0n) - Number(bigIntValue < 0n);\n}\n\nfunction sortClassList(classList: string[]): string[] {\n  const classNamesWithOrder = ctx.getClassOrder(classList);\n\n  return classNamesWithOrder\n    .sort(([, a]: [string, bigint], [, z]: [string, bigint]) => {\n      if (a === z) return 0;\n      if (a === null) return -1;\n      if (z === null) return 1;\n      return bigSign(a - z);\n    })\n    .map(([className]: [string, bigint]) => className);\n}\n"],"names":[],"version":3,"file":"index.js.map"}